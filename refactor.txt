My first has been to modularise Home page and extract from it two components and two arrays.

  -Utils:
    I decided to create a new folder named "utils" with a corresponding file for each variable: fakeRecipies and fakeRecommendations. 
    After creating each file, each variable has been exported to its corresponding component.

  -Components:
    Home.jsx was overloaded with a lot of responsibilities that could be extracted into new components. Thus, I created "components" folder where the components will have each own folder.
    Separating functions from Home.jsx into smaller components, everything is easier to read and, easier to correct (in case of bugs) and it's more scalable.
    In each folder there will be an extra file which will be its corresponding styled-components file.
    

  -Photo: 
    I decided to remove the functions renderImage and renderImageBox as I have added a conditional checking if item.photo exists or not.
    
  -Details:
    Extracted the component part from Detail page into DetailsRecipe component. Corrected the details page to always show the data from the selected recipe. To do that, I changed how
    Link path to add the id of the requested recipe, and the id will be get through params with useParams. After getting the id, the page will filter that id to find the desired recipe and
    it will pass the data (destructuring it first) through props.
    Changed all headings. H1 is only for the recipe name, as it is the most important element semantically speaking. Now headings related to topics have been changed to h2 and subtopics to h3.

  -Heading:
    Created a Layout component containing the heading, and it will wrapp App component. Doing it this way, Heading element will be displayed in every page and will be make our code easier to fix
    and more scalable, as we can add more features easily such as a footer.

  -Recipies: 
    Changed the div containing the info to an unordered list, and <p> elements to list items as it is semantically better in that case.
    Changed order between category and recipe name. Now recipe name will be displayed above the category name.
    Removed fakeData and fakeRecipies in order to avoid repeating unnecessary code. Instead, created a carousel to show recommendations.

  -TypeScript: 
    Installed TypeScript and changed all the files to its corresponding extension. JSX files are now TSX, and JS files are now TS.
    Created a tsconfig.json file with basic configuration to be able to run react-jsx with latest ECMAScript version.
    Created an Interfaces folder with a Recipe interface file. In this file a Recipe interface has been created to type the Recipe data.
    All the components's return are typed to be JSX.Element.
    A RecipeObjectProps interface has been created in DetailsRecipe.tsx to type the result of DetailsRecipe props.

  -StyledComponents:
    Created StyledComponents files for each Component with its corresponding global css rules.
    All the css rules applied to styled components are nested if it's possible. 
    After moving all the global css rules, I have deleted the CSS files as they are no longer required. 

  -Responsive design:
    Added media query at 600px as requested in the exercice. For it, I have changed some things such as flex direction display in details (from row to column), changed font size to be
    a bit smaller and fit better, created a new link element which is only showing with media max-width 600px to show an arrow instead of the "see more" button".

  -Folder structure: 
    I have created a new folder structure with the following criteria:
      - Pages: In this folder we will only find Home and Recipe folder. Those folders contain the files that will render each respective components. 
      · Home: Home page responsibility is to render the Recipies container and the Recommended recipies carousel.
      · Detail: Detail page's responsibility is to render all the details of a single recipe.

      -Components: In this folder we will find all the components that compose a page. Due to the simplicity of this application, I have decided to keep it simple with 4 major components.
      · DetailsRecipe: In this folder you can find the DetailsRecipe component, its corresponding styled component file and a unit test file. 
        The component will render all the information in regard with the recipe.

      · Layout: This folder contains the Layout component, its corresponding style component file and a unit test file.
        The component was wrapped around App in order to be displayed in every page, and it's main responsibility is to render a link with a heading.

      · Recipies: This folder contains the Recipies component, its corresponding styled component and a unit test file.
        The component responsibility is to render a card for each recipe with a photo and some information regarding the recipe. Due to the low complexity of this exercicie
        I decided to keep it in just a component, but in larger projects would be better to divide it in two different components. A component that creates a single card with the information
        that it receives, and another component that contains the cards rendered in the previous component.

      · RecommendedRecipies: The folder contains a RecommendedRecipies component and its corresponding styled component.
        His responsibility is to render a list of clickable images that will redirect us to the detail page of each recipe.
        I decided to make this component a carousel in order to make it fit better either in desktop or with 600px media, always maintaining the proposed structure.
             